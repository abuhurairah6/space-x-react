{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Abu Salleh\\\\documents\\\\GitHub\\\\space-x-react\\\\pages\\\\_app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { ApolloProvider } from '@apollo/react-hooks'; // import withData from '../';\n\nimport App from 'next/app';\nimport '../node_modules/bulma/css/bulma.css';\nimport '../css/custom-styles.css';\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport fetch from 'node-fetch';\nimport gql from 'graphql-tag';\n/*client.query({\r\n    query: gql`{\r\n\t    rates(currency: \"USD\") {\r\n\t      currency\r\n\t    }\r\n\t}`\r\n  })\r\n  .then(result => console.log(result));*/\n\nclass MyApp extends App {\n  render() {\n    const cache = new InMemoryCache();\n    const link = new createHttpLink({\n      uri: 'https://48p1r2roz4.sse.codesandbox.io',\n      fetch: fetch\n    });\n    const client = new ApolloClient({\n      cache,\n      link\n    });\n    const {\n      Component,\n      pageProps\n    } = this.props;\n    console.log(client);\n    return __jsx(ApolloProvider, {\n      client: client,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 3\n      }\n    }, __jsx(Component, _extends({}, pageProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 4\n      }\n    })));\n  }\n\n}\n\nexport default MyApp;","map":{"version":3,"sources":["C:/Users/Abu Salleh/documents/GitHub/space-x-react/pages/_app.js"],"names":["ApolloProvider","App","ApolloClient","InMemoryCache","createHttpLink","fetch","gql","MyApp","render","cache","link","uri","client","Component","pageProps","props","console","log"],"mappings":";;;;;;AAAA,SAASA,cAAT,QAA+B,qBAA/B,C,CACA;;AACA,OAAOC,GAAP,MAAgB,UAAhB;AACA,OAAO,qCAAP;AACA,OAAO,0BAAP;AAEA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA;;;;;;;;;AASA,MAAMC,KAAN,SAAoBN,GAApB,CAAwB;AAEvBO,EAAAA,MAAM,GAAG;AACR,UAAMC,KAAK,GAAG,IAAIN,aAAJ,EAAd;AACA,UAAMO,IAAI,GAAG,IAAIN,cAAJ,CAAmB;AAC9BO,MAAAA,GAAG,EAAE,uCADyB;AACgBN,MAAAA,KAAK,EAAEA;AADvB,KAAnB,CAAb;AAIA,UAAMO,MAAM,GAAG,IAAIV,YAAJ,CAAiB;AAC9BO,MAAAA,KAD8B;AAE9BC,MAAAA;AAF8B,KAAjB,CAAf;AAKA,UAAM;AAACG,MAAAA,SAAD;AAAYC,MAAAA;AAAZ,QAAyB,KAAKC,KAApC;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,MAAZ;AACA,WACA,MAAC,cAAD;AAAgB,MAAA,MAAM,EAAEA,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,MAAC,SAAD,eAAeE,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADD,CADA;AAKA;;AApBsB;;AAuBxB,eAAeP,KAAf","sourcesContent":["import { ApolloProvider } from '@apollo/react-hooks';\r\n// import withData from '../';\r\nimport App from 'next/app';\r\nimport '../node_modules/bulma/css/bulma.css';\r\nimport '../css/custom-styles.css';\r\n\r\nimport { ApolloClient } from \"apollo-client\";\r\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\r\nimport { createHttpLink } from \"apollo-link-http\";\r\nimport fetch from 'node-fetch';\r\nimport gql from 'graphql-tag';\r\n\r\n/*client.query({\r\n    query: gql`{\r\n\t    rates(currency: \"USD\") {\r\n\t      currency\r\n\t    }\r\n\t}`\r\n  })\r\n  .then(result => console.log(result));*/\r\n\r\nclass MyApp extends App {\r\n\r\n\trender() {\r\n\t\tconst cache = new InMemoryCache();\r\n\t\tconst link = new createHttpLink({\r\n\t\t  uri: 'https://48p1r2roz4.sse.codesandbox.io', fetch: fetch\r\n\t\t});\r\n\r\n\t\tconst client = new ApolloClient({\r\n\t\t  cache,\r\n\t\t  link\r\n\t\t});\r\n\r\n\t\tconst {Component, pageProps} = this.props;\r\n\t\tconsole.log(client);\r\n\t\treturn (\r\n\t\t<ApolloProvider client={client}>\r\n\t\t\t<Component {...pageProps} />\r\n\t\t</ApolloProvider>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default MyApp;"]},"metadata":{},"sourceType":"module"}